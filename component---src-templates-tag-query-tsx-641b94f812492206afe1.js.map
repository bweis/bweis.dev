{"version":3,"sources":["webpack://@bweis/personal-site/./src/components/item-tags.tsx","webpack://@bweis/personal-site/./src/components/blog-list-item.tsx","webpack://@bweis/personal-site/./src/components/listing.tsx","webpack://@bweis/personal-site/./src/components/tag.tsx","webpack://@bweis/personal-site/./src/templates/tag-query.tsx"],"names":["tags","useThemeConfig","tagsPath","basePath","map","tag","i","key","slug","as","Link","to","replaceSlashes","name","post","showTags","mb","sx","fontSize","color","title","mt","a","date","posts","className","Tag","pageContext","alignItems","justifyContent","flexFlow","variant","props","allPost","data","nodes"],"mappings":"2LAiCA,IApBiB,SAAC,GAAyB,IAAvBA,EAAsB,EAAtBA,KAClB,GAA+BC,SAAvBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,SAElB,OACE,gBAAC,WAAD,KACGH,EAAKI,KAAI,SAACC,EAAKC,GAAN,OACR,gBAAC,WAAD,CAAgBC,IAAKF,EAAIG,QACpBF,GAAF,KACD,gBAAC,KAAD,CACEG,GAAIC,OACJC,IAAIC,OAAe,IAAIT,EAAL,IAAiBD,EAAjB,IAA6BG,EAAIG,OAElDH,EAAIQ,a,gKCsBjB,EAxBqB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,IAASC,gBAAT,gBACnB,QAAC,KAAD,CAAKC,GAAI,IACP,QAAC,KAAD,CAAOP,GAAIC,OAAMC,GAAIG,EAAKN,KAAMS,GAAI,CAAEC,SAAU,CAAC,EAAG,EAAG,GAAIC,MAAM,SAC9DL,EAAKM,QAER,aACEH,GAAI,CACFE,MAAM,YACNE,GAAI,EACJC,EAAG,CAAEH,MAAM,aACXD,SAAU,CAAC,EAAG,EAAG,MAGnB,oBAAOJ,EAAKS,MACXT,EAAKd,MAAQe,IACZ,QAAC,WAAD,YAEE,QAAC,IAAD,CAAUf,KAAMc,EAAKd,WCX/B,EARgB,SAAC,GAAD,IAAGwB,EAAH,EAAGA,MAAH,IAAUC,iBAAV,eAA0BV,gBAA1B,gBACd,mBAASE,GAAI,CAAED,GAAI,CAAC,EAAG,EAAG,IAAMS,UAAWA,GACxCD,EAAMpB,KAAI,SAAAU,GAAI,OACb,QAAC,EAAD,CAAcP,IAAKO,EAAKN,KAAMM,KAAMA,EAAMC,SAAUA,S,sBCOpDW,EAAM,SAAC,GAAsC,IAApCF,EAAmC,EAAnCA,MAAOG,EAA4B,EAA5BA,YACpB,GAA+B1B,SAAvBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,SAElB,OACE,QAAC,IAAD,MACE,QAAC,IAAD,CAAKiB,MAAK,QAAUO,EAAYd,QAChC,QAAC,KAAD,CACEI,GAAI,CACFW,WAAW,SACXC,eAAe,gBACfC,SAAS,UAGX,QAAC,KAAD,CAASC,QAAQ,aAAaJ,EAAYd,OAC1C,QAAC,KAAD,CACEJ,GAAIC,OACJO,GAAI,CAAEc,QAAQ,mBACdpB,IAAIC,OAAe,IAAIT,EAAL,IAAiBD,IAHrC,mBAQF,QAAC,EAAD,CAASsB,MAAOA,EAAOP,GAAI,CAAEI,GAAI,CAAC,EAAG,QClD3C,MDqEe,YAAiD,IAAxBW,EAAuB,oBAEnDC,EACND,EADFE,KAAQD,QAGV,OAAO,QAACP,EAAD,eAAKF,MAAOS,EAAQE,OAAWH","file":"component---src-templates-tag-query-tsx-641b94f812492206afe1.js","sourcesContent":["import React from \"react\"\nimport { Link as TLink } from \"theme-ui\"\nimport { Link } from \"gatsby\"\nimport useThemeConfig from \"../hooks/use-theme-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useThemeConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <TLink\n            as={Link}\n            to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}\n          >\n            {tag.name}\n          </TLink>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","/** @jsx jsx */\nimport React from \"react\"\nimport { jsx, Link as TLink } from \"theme-ui\"\nimport { Box } from \"@theme-ui/components\"\nimport { Link } from \"gatsby\"\nimport ItemTags from \"./item-tags\"\n\ntype BlogListItemProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }\n  showTags?: boolean\n}\n\nconst BlogListItem = ({ post, showTags = true }: BlogListItemProps) => (\n  <Box mb={4}>\n    <TLink as={Link} to={post.slug} sx={{ fontSize: [1, 2, 3], color: `text` }}>\n      {post.title}\n    </TLink>\n    <p\n      sx={{\n        color: `secondary`,\n        mt: 1,\n        a: { color: `secondary` },\n        fontSize: [1, 1, 2],\n      }}\n    >\n      <time>{post.date}</time>\n      {post.tags && showTags && (\n        <React.Fragment>\n          {` â€” `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n    </p>\n  </Box>\n)\n\nexport default BlogListItem\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport BlogListItem from \"./blog-list-item\"\n\ntype ListingProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }[]\n  className?: string\n  showTags?: boolean\n}\n\nconst Listing = ({ posts, className = ``, showTags = true }: ListingProps) => (\n  <section sx={{ mb: [5, 6, 7] }} className={className}>\n    {posts.map(post => (\n      <BlogListItem key={post.slug} post={post} showTags={showTags} />\n    ))}\n  </section>\n)\n\nexport default Listing\n","/** @jsx jsx */\nimport { jsx, Heading, Link as TLink } from \"theme-ui\"\nimport { Flex } from \"@theme-ui/components\"\nimport { Link } from \"gatsby\"\nimport Layout from \"./layout\"\nimport useThemeConfig from \"../hooks/use-theme-config\"\nimport Listing from \"./listing\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\nimport SEO from \"./seo\"\n\ntype TagProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags: {\n      name: string\n      slug: string\n    }[]\n  }[]\n  pageContext: {\n    isCreatedByStatefulCreatePages: boolean\n    slug: string\n    name: string\n    [key: string]: any\n  }\n}\n\nconst Tag = ({ posts, pageContext }: TagProps) => {\n  const { tagsPath, basePath } = useThemeConfig()\n\n  return (\n    <Layout>\n      <SEO title={`Tag: ${pageContext.name}`} />\n      <Flex\n        sx={{\n          alignItems: `center`,\n          justifyContent: `space-between`,\n          flexFlow: `wrap`,\n        }}\n      >\n        <Heading variant=\"styles.h2\">{pageContext.name}</Heading>\n        <TLink\n          as={Link}\n          sx={{ variant: `links.secondary` }}\n          to={replaceSlashes(`/${basePath}/${tagsPath}`)}\n        >\n          View all tags\n        </TLink>\n      </Flex>\n      <Listing posts={posts} sx={{ mt: [4, 5] }} />\n    </Layout>\n  )\n}\n\ntype WrapperProps = {\n  data: {\n    allPost: any\n    [key: string]: any\n  }\n  pageContext: {\n    isCreatedByStatefulCreatePages: boolean\n    slug: string\n    name: string\n    [key: string]: any\n  }\n  [key: string]: any\n}\n\nexport default function TagWrapper({ ...props }: WrapperProps) {\n  const {\n    data: { allPost },\n  } = props\n\n  return <Tag posts={allPost.nodes} {...props} />\n}\n","import { graphql } from \"gatsby\"\nimport TagComponent from \"../components/tag\"\n\nexport default TagComponent\n\nexport const query = graphql`\n  query ($slug: String!, $formatString: String!) {\n    allPost(\n      sort: { fields: date, order: DESC }\n      filter: { tags: { elemMatch: { slug: { eq: $slug } } } }\n    ) {\n      nodes {\n        slug\n        title\n        date(formatString: $formatString)\n        excerpt\n        timeToRead\n        description\n        tags {\n          name\n          slug\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}