{"version":3,"sources":["webpack://@bweis/bweis.dev/./src/components/ItemTags.tsx","webpack://@bweis/bweis.dev/./src/components/BlogListItem.tsx","webpack://@bweis/bweis.dev/./src/components/Listing.tsx","webpack://@bweis/bweis.dev/./src/components/Blog.tsx","webpack://@bweis/bweis.dev/./src/templates/blog-query.tsx"],"names":["tags","useThemeConfig","tagsPath","basePath","map","tag","i","key","slug","to","replaceSlashes","name","post","showTags","mb","Link","sx","fontSize","color","title","mt","a","date","ItemTags","posts","className","Blog","Layout","SEO","alignItems","justifyContent","flexFlow","variant","Listing","props","allPost","data","nodes"],"mappings":"yKA6BA,IAjBiB,SAAC,GAAyB,IAAvBA,EAAsB,EAAtBA,KAClB,GAA+BC,SAAvBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,SAElB,OACE,gBAAC,WAAD,KACGH,EAAKI,KAAI,SAACC,EAAKC,GAAN,OACR,gBAAC,WAAD,CAAgBC,IAAKF,EAAIG,QACpBF,GAAF,KACD,gBAAC,IAAD,CAAMG,IAAIC,OAAe,IAAIP,EAAL,IAAiBD,EAAjB,IAA6BG,EAAIG,OACtDH,EAAIM,MACC,W,8HCyBlB,EAxBqB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,IAASC,gBAAT,gBACnB,QAAC,KAAD,CAAKC,GAAI,IACP,QAACC,EAAA,EAAD,CAAMN,GAAIG,EAAKJ,KAAMQ,GAAI,CAAEC,SAAU,CAAC,EAAG,EAAG,GAAIC,MAAM,SACnDN,EAAKO,QAER,aACEH,GAAI,CACFE,MAAM,YACNE,GAAI,EACJC,EAAG,CAAEH,MAAM,aACXD,SAAU,CAAC,EAAG,EAAG,MAGnB,oBAAOL,EAAKU,MACXV,EAAKZ,MAAQa,IACZ,QAAC,WAAD,YAEE,QAACU,EAAA,EAAD,CAAUvB,KAAMY,EAAKZ,WCX/B,EARgB,SAAC,GAAD,IAAGwB,EAAH,EAAGA,MAAH,IAAUC,iBAAV,eAA0BZ,gBAA1B,gBACd,mBAASG,GAAI,CAAEF,GAAI,CAAC,EAAG,EAAG,IAAMW,UAAWA,GACxCD,EAAMpB,KAAI,SAAAQ,GAAI,OACb,QAAC,EAAD,CAAcL,IAAKK,EAAKJ,KAAMI,KAAMA,EAAMC,SAAUA,U,2KCGpDa,EAAO,SAAC,GAA2B,IAAzBF,EAAwB,EAAxBA,MACd,GAA+BvB,SAAvBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,SAElB,OACE,QAACwB,EAAA,EAAD,MACE,QAACC,EAAA,EAAD,CAAKT,MAAM,UACX,QAAC,KAAD,CACEH,GAAI,CACFa,WAAW,SACXC,eAAe,gBACfC,SAAS,UAGX,QAAC,KAAD,CAASC,QAAQ,aAAjB,SACA,QAACjB,EAAA,EAAD,CACEC,GAAI,CAAEgB,QAAQ,mBACdvB,IAAIC,OAAe,IAAIP,EAAL,IAAiBD,IAFrC,mBAOF,QAAC+B,EAAA,EAAD,CAAST,MAAOA,EAAOR,GAAI,CAAEI,GAAI,CAAC,EAAG,QC7C3C,MD0De,YAAkD,IAAxBc,EAAuB,oBAEpDC,EACND,EADFE,KAAQD,QAGV,OAAO,QAACT,EAAD,eAAMF,MAAOW,EAAQE,OAAWH","file":"component---src-templates-blog-query-tsx-3e430e670e9669faccfb.js","sourcesContent":["import React from \"react\"\nimport useThemeConfig from \"../hooks/use-theme-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\nimport Link from \"./Link\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useThemeConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <Link to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </Link>{\" \"}\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","/** @jsx jsx */\nimport React from \"react\"\nimport { jsx } from \"theme-ui\"\nimport { Box } from \"@theme-ui/components\"\nimport ItemTags from \"./ItemTags\"\nimport Link from \"./Link\"\n\ntype BlogListItemProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }\n  showTags?: boolean\n}\n\nconst BlogListItem = ({ post, showTags = true }: BlogListItemProps) => (\n  <Box mb={4}>\n    <Link to={post.slug} sx={{ fontSize: [1, 2, 3], color: `text` }}>\n      {post.title}\n    </Link>\n    <p\n      sx={{\n        color: `secondary`,\n        mt: 1,\n        a: { color: `secondary` },\n        fontSize: [1, 1, 2],\n      }}\n    >\n      <time>{post.date}</time>\n      {post.tags && showTags && (\n        <React.Fragment>\n          {` â€” `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n    </p>\n  </Box>\n)\n\nexport default BlogListItem\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport BlogListItem from \"./BlogListItem\"\n\ntype ListingProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }[]\n  className?: string\n  showTags?: boolean\n}\n\nconst Listing = ({ posts, className = ``, showTags = true }: ListingProps) => (\n  <section sx={{ mb: [5, 6, 7] }} className={className}>\n    {posts.map(post => (\n      <BlogListItem key={post.slug} post={post} showTags={showTags} />\n    ))}\n  </section>\n)\n\nexport default Listing\n","/** @jsx jsx */\n\nimport { jsx, Heading } from \"theme-ui\"\nimport Link from \"./Link\"\nimport { Flex } from \"@theme-ui/components\"\nimport Layout from \"./Layout\"\nimport Listing from \"./Listing\"\nimport useThemeConfig from \"../hooks/use-theme-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\nimport SEO from \"./SEO\"\n\ntype PostsProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }[]\n  [key: string]: any\n}\n\nconst Blog = ({ posts }: PostsProps) => {\n  const { tagsPath, basePath } = useThemeConfig()\n\n  return (\n    <Layout>\n      <SEO title=\"Blog\" />\n      <Flex\n        sx={{\n          alignItems: `center`,\n          justifyContent: `space-between`,\n          flexFlow: `wrap`,\n        }}\n      >\n        <Heading variant=\"styles.h2\">Blog</Heading>\n        <Link\n          sx={{ variant: `links.secondary` }}\n          to={replaceSlashes(`/${basePath}/${tagsPath}`)}\n        >\n          View all tags\n        </Link>\n      </Flex>\n      <Listing posts={posts} sx={{ mt: [4, 5] }} />\n    </Layout>\n  )\n}\n\ntype WrapperProps = {\n  data: {\n    allPost: any\n    [key: string]: string\n  }\n  [key: string]: any\n}\n\nexport default function BlogWrapper({ ...props }: WrapperProps) {\n  const {\n    data: { allPost },\n  } = props\n\n  return <Blog posts={allPost.nodes} {...props} />\n}\n","import { graphql } from \"gatsby\"\nimport BlogComponent from \"../components/Blog\"\n\nexport default BlogComponent\n\nexport const query = graphql`\n  query ($formatString: String!) {\n    allPost(sort: { fields: date, order: DESC }) {\n      nodes {\n        slug\n        title\n        date(formatString: $formatString)\n        excerpt\n        timeToRead\n        description\n        tags {\n          name\n          slug\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}